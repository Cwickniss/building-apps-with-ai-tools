---
description: Guidelines for creating interactive features and animations
globs: **/*.{html,js,css}
---

# Interactive Features and Animations

This project encourages creating engaging, interactive web applications with smooth animations and dynamic features.

## Interactive Feature Categories

### 1. User Interface Animations
- **Fade-in effects**: Smooth page load animations
- **Hover effects**: Interactive button and element states
- **Transitions**: Smooth state changes and navigation
- **Loading states**: Visual feedback during operations

### 2. Dynamic Content
- **Typing effects**: Animated text appearance
- **Random content**: Dynamic tips, quotes, or facts
- **Real-time updates**: Live data visualization
- **Interactive forms**: Dynamic form behavior

### 3. Visual Effects
- **Parallax scrolling**: Mouse movement effects
- **Color animations**: Background and theme changes
- **Particle effects**: Visual interest and engagement
- **Responsive animations**: Mobile-optimized interactions

## Implementation Examples

### Landing Page Features
Reference [apps/simple-webpage/index.html](mdc:apps/simple-webpage/index.html) for:
- Animated typing effect for headings
- Background color animations
- Interactive tip buttons
- Parallax mouse movement effects
- Smooth fade-in animations

### Quiz Application Interactions
Reference [apps/quiz-app/index.html](mdc:apps/quiz-app/index.html) for:
- Dynamic question loading
- Progress indicators
- Interactive answer selection
- Score animations
- Result celebrations

## Animation Best Practices

### Performance Considerations
- Use CSS transforms and opacity for smooth animations
- Avoid animating layout properties (width, height, margin)
- Use `requestAnimationFrame` for complex animations
- Implement reduced motion preferences for accessibility

### Accessibility Guidelines
- Respect `prefers-reduced-motion` media query
- Provide alternative text for visual effects
- Ensure keyboard navigation works with animations
- Maintain focus indicators during transitions

### Code Examples

#### Smooth Fade-in Animation
```css
.fade-in {
  opacity: 0;
  transition: opacity 1.2s ease-in-out;
}

.fade-in.loaded {
  opacity: 1;
}
```

#### Typing Effect
```javascript
function typeText(element, text, speed = 60) {
  element.textContent = '';
  let i = 0;
  function typeChar() {
    if (i < text.length) {
      element.textContent += text[i];
      i++;
      setTimeout(typeChar, speed);
    }
  }
  typeChar();
}
```

#### Parallax Mouse Effect
```javascript
document.addEventListener('mousemove', (e) => {
  const percent = (e.clientX / window.innerWidth - 0.5) * 2;
  element.style.transform = `translateX(${percent * 20}px)`;
});
```

## Interactive Feature Checklist

### Basic Interactions
- [ ] Hover effects on buttons and links
- [ ] Smooth transitions between states
- [ ] Loading indicators for async operations
- [ ] Form validation feedback
- [ ] Error message animations

### Advanced Features
- [ ] Dynamic content generation
- [ ] Real-time data updates
- [ ] Interactive visualizations
- [ ] Gesture-based interactions
- [ ] Sound effects (optional)

### Accessibility
- [ ] Reduced motion support
- [ ] Keyboard navigation
- [ ] Screen reader compatibility
- [ ] Focus management
- [ ] Alternative interaction methods

## Animation Libraries and Tools

### CSS Libraries
- **Animate.css**: Pre-built animation classes
- **Hover.css**: Hover effect library
- **AOS**: Animate on scroll library

### JavaScript Libraries
- **GSAP**: Professional animation library
- **Framer Motion**: React animation library
- **Lottie**: After Effects animations

### Performance Tools
- **Chrome DevTools**: Animation performance analysis
- **Lighthouse**: Performance auditing
- **WebPageTest**: Animation performance testing

## Example Implementation

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <style>
    @media (prefers-reduced-motion: reduce) {
      * { animation-duration: 0.01ms !important; }
    }
    
    .interactive-button {
      transition: all 0.3s ease;
      transform: scale(1);
    }
    
    .interactive-button:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
  </style>
</head>
<body>
  <button class="interactive-button" onclick="showTip()">
    Show AI Tip
  </button>
  
  <script>
    function showTip() {
      // Smooth animation with accessibility support
      const tip = document.getElementById('tip');
      tip.style.opacity = '0';
      tip.style.transform = 'translateY(10px)';
      
      setTimeout(() => {
        tip.style.opacity = '1';
        tip.style.transform = 'translateY(0)';
      }, 100);
    }
  </script>
</body>
</html>
```
